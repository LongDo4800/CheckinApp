package com.example.CheckInApi.controller;

import com.example.CheckInApi.exception.ObjectNotFoundException;
import com.example.CheckInApi.jwt.JwtTokenUtil;
import com.example.CheckInApi.modal.Profile;
import com.example.CheckInApi.modal.Sitener;
import com.example.CheckInApi.repository.CheckinRepository;
import com.example.CheckInApi.repository.SitenerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;
import com.example.CheckInApi.repository.ProfileRepository;
import org.springframework.security.core.userdetails.UserDetailsService;

import java.lang.reflect.Field;
import java.util.*;

import static com.example.CheckInApi.utils.RespondUtil.ok;

@CrossOrigin(origins = "http://localhost:3000")
@RestController // This means that this class is a Controller
public class ProfileController {
    @Autowired // This means to get the bean called profileRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ProfileRepository profileRepository;
    @Autowired
    private SitenerRepository sitenerRepository;
    @Autowired
    private CheckinRepository checkinRepository;
    @Autowired
    private AuthenticationManager authenticationManager;
    @Autowired
    private JwtTokenUtil jwtTokenUtil;

    @PostMapping(path = "/signUp") // Map ONLY POST Requests
    public Integer createProfile(@RequestBody Profile newProfile) throws ObjectNotFoundException {
        List usernames = profileRepository.findUsernames();

        if (!(usernames.contains(newProfile.getUsername()))) {
            Profile profile = profileRepository.save(newProfile);

            return profile.getId();
        } else {
            throw new ObjectNotFoundException("Username already exists");
        }
    }
    
    public Map<String, String> deleteBySitener(@PathVariable int id) {
        Profile profile = profileRepository.findById(id).orElseThrow(() -> new ObjectNotFoundException("Could not found id:" + id));
        profileRepository.deleteById(id);
        return ok();
    }

    @PostMapping(path = "/signIn") // Map ONLY POST Requests
    public Map<String, Object> signIn(@RequestBody Profile rqProfile) throws Exception {
        String username = rqProfile.getUsername();
        String password = rqProfile.getPassword();

        ArrayList profile = profileRepository.getProfileByUserNamePassword(username, password);
        if(!(profile.isEmpty())){
            Sitener sitener = sitenerRepository.findSitenerByProfileId((Integer) profile.get(0));

            Profile userProfile = profileRepository.findUsername(username);
            final String token = jwtTokenUtil.generateToken(userProfile);
            if (sitener.getId() == null) {
                throw new ObjectNotFoundException("Chưa có thông tin người dùng");
            }
            Sitener sitenerRs = new Sitener(sitener.getId(),sitener.getName(),sitener.getBirthday(),sitener.getTeam(),sitener.getAvatar());
            Map<String, Object> map = parameters(sitenerRs);
            map.put("token", token);
            return map;
        }
        else {
            throw new ObjectNotFoundException("error");
        }
    }

    @PutMapping(path = "/changePassword/id={id}&password={password}")
    public Optional<Profile> updatePassword(@RequestBody Profile newProfile, @PathVariable int id,@PathVariable String password) {
        if(!(profileRepository.findPassById(id).equals(password))){
            throw new ObjectNotFoundException("error");
        }
        else{
            return profileRepository.findById(id).map(profile ->
            {

                profile.setPassword(newProfile.getPassword());

                return profileRepository.save(profile);
            });
        }
    }

    public static Map<String, Object> parameters(Object obj) {
        Map<String, Object> map = new HashMap<>();
        for (Field field : obj.getClass().getDeclaredFields()) {
            field.setAccessible(true);
            try { map.put(field.getName(), field.get(obj)); } catch (Exception e) { }
        }
        return map;
    }
}