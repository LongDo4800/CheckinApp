package com.example.CheckInApi.controller;

import com.example.CheckInApi.exception.ObjectNotFoundException;
import com.example.CheckInApi.modal.Profile;
import com.example.CheckInApi.modal.Sitener;
import com.example.CheckInApi.repository.CheckinRepository;
import com.example.CheckInApi.repository.SitenerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.example.CheckInApi.repository.ProfileRepository;

import java.util.*;

import static com.example.CheckInApi.utils.RespondUtil.ok;

@RestController // This means that this class is a Controller
public class ProfileController {
    @Autowired // This means to get the bean called profileRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ProfileRepository profileRepository;
    @Autowired
    private SitenerRepository sitenerRepository;
    @Autowired
    private CheckinRepository checkinRepository;

    @PostMapping(path = "/signUp") // Map ONLY POST Requests
    public Profile createProfile(@RequestBody Profile newProfile) throws ObjectNotFoundException {
        List usernames = profileRepository.findUsernames();

        if (!(usernames.contains(newProfile.getUsername()))) {
            return profileRepository.save(newProfile);
        } else {
            throw new ObjectNotFoundException("Username already exists");
        }
    }

    @PostMapping(path = "/signIn")
    public @ResponseBody
    List<Profile> getAllProfiles() {
        // This returns a JSON or XML with the users
        return profileRepository.findAll();
    }
    
    public Map<String, String> deleteBySitener(@PathVariable int id) {
        Profile profile = profileRepository.findById(id).orElseThrow(() -> new ObjectNotFoundException("Could not found id:" + id));
        profileRepository.deleteById(id);
        return ok();
    }

    @PostMapping(path = "/signIn/username={username}&password={password}") // Map ONLY POST Requests
    public Sitener signIn(@PathVariable String username, @PathVariable String password) throws ObjectNotFoundException {
        ArrayList profile = profileRepository.getProfileByUserNamePassword(username, password);
        if(!(profile.isEmpty())){
            Sitener sitener = sitenerRepository.findSitenerByProfileId((Integer) profile.get(0));
            return new Sitener(sitener.getId(),sitener.getName(),sitener.getBirthday(),sitener.getTeam(),sitener.getAvatar());
        }
        else {
            throw new ObjectNotFoundException("error");
        }
    }

    @PutMapping(path = "/changePassword/id={id}&password={password}")
    public Optional<Profile> updatePassword(@RequestBody Profile newProfile, @PathVariable int id,@PathVariable String password) {
        if(!(profileRepository.findPassById(id).equals(password))){
            throw new ObjectNotFoundException("error");
        }
        else{
            return profileRepository.findById(id).map(profile ->
            {

                profile.setPassword(newProfile.getPassword());

                return profileRepository.save(profile);
            });
        }
    }
}