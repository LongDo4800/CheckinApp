package com.example.CheckInApi.controller;

import com.example.CheckInApi.exception.ObjectNotFoundException;
import com.example.CheckInApi.modal.Checkin;
import com.example.CheckInApi.modal.Profile;
import com.example.CheckInApi.modal.Sitener;
import com.example.CheckInApi.repository.CheckinRepository;
import com.example.CheckInApi.repository.SitenerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.Query;
import org.springframework.web.bind.annotation.*;
import com.example.CheckInApi.repository.ProfileRepository;

import java.util.List;
import java.util.Map;

import static com.example.CheckInApi.utils.RespondUtil.ok;

@RestController // This means that this class is a Controller
public class ProfileController {
    @Autowired // This means to get the bean called profileRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ProfileRepository profileRepository;
    @Autowired
    private SitenerRepository sitenerRepository;
    @Autowired
    private CheckinRepository checkinRepository;

    @PostMapping(path="/createProfile") // Map ONLY POST Requests
    public Profile createProfile(@RequestBody Profile newProfile){

        return profileRepository.save(newProfile);
    }

    @GetMapping(path="/getProfile")
    public @ResponseBody
    List<Profile> getAllProfiles() {
        // This returns a JSON or XML with the users
        return profileRepository.findAll();
    }

    @GetMapping(path="/getProfile/{id}")
    public Profile getProfiles(@PathVariable int id) {
        // This returns a JSON or XML with the users
        return  profileRepository.findById(id).orElseThrow(()->new ObjectNotFoundException("Could not found id:"+id));
    }

    @DeleteMapping(path = "/deleteProfile/{id}")
    public Map<String, String> deleteBySitener(@PathVariable int id){
        Profile profile = profileRepository.findById(id).orElseThrow(()-> new ObjectNotFoundException("Could not found id:"+id));
        profileRepository.deleteById(id);
        return ok();
    }

    @PutMapping(path="/updateProfile/{id}")
    public Profile updateProfile(@RequestBody Profile newProfile,@PathVariable int id){
        return profileRepository.findById(id).map(profile -> {
            profile.setUsername(newProfile.getUsername());
            profile.setPassword(newProfile.getPassword());
            profile.setRole(newProfile.getRole());
            return profileRepository.save(profile);
            }).orElseGet(()->{
                return profileRepository.save(newProfile);
        });

    }
}